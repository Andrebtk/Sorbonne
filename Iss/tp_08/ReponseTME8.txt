---------------------------------
ISS - Initiation aux Systèmes d’exploitation et au Shell
TP 08 – Parallélisation et synchronisation avec wait
Andre Bertok
---------------------------------

========================================
Exercice 1 : AdopteUnZombie.com
========================================

question 1:
-------------

$> sleep 30 &
[1] 6862

$> ps o pid,ppid,stat
    PID    PPID STAT
   5796    5776 Ss
   6862    5796 S
   6874    5796 R+

question 2:
-------------

-pere.sh-

#!/bin/bash

bash fils.sh &
CHILD_PID=$!

echo "Lancement de l'enfant avec PID $CHILD_PID depuis le parent (PID $$)."

sleep 2
echo "Fin du parent (PID $$)."

-fils.sh-

#!/bin/bash
echo "Processus enfant lancé (PID $$)"
sleep 1000



$> bash pere.sh
Lancement de l'enfant avec PID 7669 depuis le parent (PID 7668).
Processus enfant lancé (PID 7669)
Fin du parent (PID 7668).

$> ps o pid,ppid,state --pid 7669
    PID    PPID S
   7669    1865 S

$> ps o pid,ppid,state --pid 1865
    PID    PPID S
   1865       1 S



question 3
-------------

-processMonitor.sh-
[ $# -eq 0 ] && echo "usage: $0 <pid>" && exit -1

for i in {0..60}; do
    sleep 1
    ps o pid,ppid,state --pid $1
done


$> ./myZombie &
e suis 10761 et mon fils 10762 va devenir un zombie

bash processMonitor.sh 10762
    PID    PPID S
  10762   10761 S
    PID    PPID S
  10762   10761 S
    PID    PPID S
  10762   10761 S
  ...
  10762   10761 S
    PID    PPID S
  10762   10761 S
    PID    PPID S
  10762   10761 S
    PID    PPID S
  10762   10761 Z
    PID    PPID S
  10762   10761 Z
    PID    PPID S
  10762   10761 Z
    PID    PPID S
...
  10762   10761 Z
    PID    PPID S
  10762   10761 Z
    PID    PPID S
    PID    PPID S
    PID    PPID S


question 4:
-------------

-zombieDetector.sh-

[ $# -eq 0 ] && echo "usage: $0 <pid>" && exit -1

for i in {0..60}; do
    sleep 1
    zombie=$(ps o pid,ppid,state --pid $1 | grep 'Z' | wc -w)

    [ $zombie -ne 0 ] && echo "Le processus est devenu zombie !!!" && exit 1 
done


$> ./myZombie &
Je suis 13082 et mon fils 13083 va devenir un zombie

$> bash zombieDetector.sh 13083
Le processus est devenu zombie !!!



========================================
Exercice 2 : D’un cœur à l’autre
========================================

Question 1:
-------------

$> wget "http://julien.sopena.fr/dico.txt" 

question 2:
-------------

for lettre in {A..Z}; do
    grep -E "^$lettre" dico.txt > "dico/$lettre.txt" &
done


========================================
Exercice 3 : À plusieurs
========================================

Question 1:
-------------

longest.sh

[ $# -ne 1 ] && echo "usage: $0 <fichier>" && exit -1
[ ! -f $1 ] && echo "$1 n'est pas un fichier" && exit -1

motL=""
motMax=0
while read mot; do
    if [ ${#mot} -gt $motMax ]; then 
        motL=$mot
        motMax=${#mot}
    fi
done < $1

echo $motL > $1.tmp


Question 2:
-------------

[ $# -ne 1 ] && echo "usage: $0 <dossier>" && exit -1
[ ! -d $1 ] && echo "$1 n'est pas un dossier" && exit -1

for fichier in $(ls $1); do 
    bash longest.sh $1/$fichier &
done

wait

for file in $(ls $1 | grep ".tmp"); do 
    cat dico/$file >> final.txt &
done

bash longest.sh final.txt
cat final.txt.tmp

rm *.tmp

Question 3:
-------------

$> time bash paraLongest.sh dico
CINEMATOGRAPHIASSIONS

real    0m0,352s
user    0m2,065s
sys     0m0,577s
$> time bash longest.sh dico.txt

real    0m1,220s
user    0m1,007s
sys     0m0,211s


Question 4:
-------------

Pour: time bash paraLongest.sh dico
real        0m0,352s
user+sys    0m2.642s

Pour: time bash longest.sh dico.txt
real        0m1,220s
user+sys    0m1.218s

On remarque que pour le script longest.sh, le temps real est environ égal à celui de user+sys.

Question 5:
-------------

Plus la différence entre real - (user+sys) est petite, plus le programme a un taux de parallélisme élevé.